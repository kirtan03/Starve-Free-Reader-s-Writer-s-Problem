semaphore turn = 1,write_mutex = 1,read_mutex = 1;
int read_count = 0;

//reader's process:
{
    wait(turn);  //waiting for its turn for execution
    wait(read_mutex); //ensuring only one read process gets the chance to             
                      // update read_count
    read_count++;
    if(read_count==1){
        wait(write_mutex); //first reader will ask for resource 
                            //access for readers
    }
    signal(read_mutex); //releasing access for updation of read count
    signal(turn);

    /reading is performed/
    /critical section/

    wait(read_mutex); //ensuring only one read process gets the chance
                        // to update read_cnt
    read_count--;
    if(read_count==0){
        signal(write_mutex); //freeing the resources for writers to write
    }
    signal(read_mutex);   //releasing access for updation of read count
}

//writer's process:
{
    wait(turn); //waiting for its turn for execution
    wait(write_mutex); //waiting if at present some reader(that arrived       
                        //before the writer) is reading

    /writing is performed/
    /critical section/

    signal(write_mutex); //releasing the resource for the other reader
                        // or writer process
    signal(turn); //Signalling the next reader or writer process in
                    // turn queue to wakeup 
}